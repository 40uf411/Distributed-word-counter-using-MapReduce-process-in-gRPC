# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import driver_pb2 as driver__pb2


class DriverStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.launchDriver = channel.unary_unary(
        '/driverPackage.Driver/launchDriver',
        request_serializer=driver__pb2.launchData.SerializeToString,
        response_deserializer=driver__pb2.status.FromString,
        )
    self.nothing = channel.unary_unary(
        '/driverPackage.Driver/nothing',
        request_serializer=driver__pb2.empty.SerializeToString,
        response_deserializer=driver__pb2.empty.FromString,
        )


class DriverServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def launchDriver(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def nothing(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DriverServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'launchDriver': grpc.unary_unary_rpc_method_handler(
          servicer.launchDriver,
          request_deserializer=driver__pb2.launchData.FromString,
          response_serializer=driver__pb2.status.SerializeToString,
      ),
      'nothing': grpc.unary_unary_rpc_method_handler(
          servicer.nothing,
          request_deserializer=driver__pb2.empty.FromString,
          response_serializer=driver__pb2.empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'driverPackage.Driver', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
